{"abi":[{"type":"function","name":"getOutcome","inputs":[{"name":"sessionId","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"outcome","type":"bool","internalType":"bool"},{"name":"finalized","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"isWinner","inputs":[{"name":"sessionId","type":"bytes32","internalType":"bytes32"},{"name":"player","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"verifyCommitment","inputs":[{"name":"commitment","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"getOutcome(bytes32)":"5d1a3b82","isWinner(bytes32,address)":"9cc19f5b","verifyCommitment(bytes32)":"fc6326ce"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sessionId\",\"type\":\"bytes32\"}],\"name\":\"getOutcome\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"outcome\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"finalized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sessionId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"isWinner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"}],\"name\":\"verifyCommitment\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"External contracts (like JejuMarket) use this interface to query game outcomes  This allows ANY prediction market contract to trustlessly access game results without needing to know the game's internal logic.\",\"kind\":\"dev\",\"methods\":{\"getOutcome(bytes32)\":{\"params\":{\"sessionId\":\"The unique game session ID\"},\"returns\":{\"finalized\":\"Whether the outcome has been revealed and finalized\",\"outcome\":\"The game outcome (true=YES, false=NO)\"}},\"isWinner(bytes32,address)\":{\"params\":{\"player\":\"The address to check\",\"sessionId\":\"The game session ID\"},\"returns\":{\"_0\":\"True if the address won, false otherwise\"}},\"verifyCommitment(bytes32)\":{\"params\":{\"commitment\":\"The commitment hash\"},\"returns\":{\"_0\":\"True if commitment exists\"}}},\"title\":\"IPredictionOracle\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getOutcome(bytes32)\":{\"notice\":\"Get the outcome and finalization status of a game\"},\"isWinner(bytes32,address)\":{\"notice\":\"Check if an address was a winner in a specific game\"},\"verifyCommitment(bytes32)\":{\"notice\":\"Verify that a commitment exists in the oracle\"}},\"notice\":\"Generic interface for prediction game oracles\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/IPredictionOracle.sol\":\"IPredictionOracle\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"src/IPredictionOracle.sol\":{\"keccak256\":\"0x04989976e56a12c2850897601f26ce9aa5b18c4b1a2baf36b3b1548d53c8b062\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://811020e288778f4fcfb2f1763efeba13352c660edebd1c220039d0eb1c4b5cb7\",\"dweb:/ipfs/QmXWxoDJAbnVcnrnnMbZhtyht9UE8yD4SFeH5KDPpTyA63\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.20+commit.a1b79de6"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"bytes32","name":"sessionId","type":"bytes32"}],"stateMutability":"view","type":"function","name":"getOutcome","outputs":[{"internalType":"bool","name":"outcome","type":"bool"},{"internalType":"bool","name":"finalized","type":"bool"}]},{"inputs":[{"internalType":"bytes32","name":"sessionId","type":"bytes32"},{"internalType":"address","name":"player","type":"address"}],"stateMutability":"view","type":"function","name":"isWinner","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"bytes32","name":"commitment","type":"bytes32"}],"stateMutability":"view","type":"function","name":"verifyCommitment","outputs":[{"internalType":"bool","name":"","type":"bool"}]}],"devdoc":{"kind":"dev","methods":{"getOutcome(bytes32)":{"params":{"sessionId":"The unique game session ID"},"returns":{"finalized":"Whether the outcome has been revealed and finalized","outcome":"The game outcome (true=YES, false=NO)"}},"isWinner(bytes32,address)":{"params":{"player":"The address to check","sessionId":"The game session ID"},"returns":{"_0":"True if the address won, false otherwise"}},"verifyCommitment(bytes32)":{"params":{"commitment":"The commitment hash"},"returns":{"_0":"True if commitment exists"}}},"version":1},"userdoc":{"kind":"user","methods":{"getOutcome(bytes32)":{"notice":"Get the outcome and finalization status of a game"},"isWinner(bytes32,address)":{"notice":"Check if an address was a winner in a specific game"},"verifyCommitment(bytes32)":{"notice":"Verify that a commitment exists in the oracle"}},"version":1}},"settings":{"remappings":["forge-std/=lib/forge-std/src/"],"optimizer":{"enabled":false,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/IPredictionOracle.sol":"IPredictionOracle"},"evmVersion":"shanghai","libraries":{}},"sources":{"src/IPredictionOracle.sol":{"keccak256":"0x04989976e56a12c2850897601f26ce9aa5b18c4b1a2baf36b3b1548d53c8b062","urls":["bzz-raw://811020e288778f4fcfb2f1763efeba13352c660edebd1c220039d0eb1c4b5cb7","dweb:/ipfs/QmXWxoDJAbnVcnrnnMbZhtyht9UE8yD4SFeH5KDPpTyA63"],"license":"Apache-2.0"}},"version":1},"id":21}